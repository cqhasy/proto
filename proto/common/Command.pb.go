//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: common/Command.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Command represents an protocol customized data when return.
//
// When the agent communicates with the OAP side using gRPC, the OAP uses Command to return the data content to the Agent.
//
// The available commands are,
// Name: ConfigurationDiscoveryCommand
// Args:
//     SerialNumber: String
//     UUID: String
//     properties: Key-value pairs rely on agent-side implementations
//
// Ref, Java agent supported configurations, https://skywalking.apache.org/docs/skywalking-java/next/en/setup/service-agent/java-agent/configuration-discovery/
//
// Name: ProfileTaskQuery
// Args:
//     SerialNumber: String
//     TaskId: String
//     EndpointName: String
//     Duration: Integer
//     MinDurationThreshold: Integer
//     DumpPeriod: Integer
//     MaxSamplingCount: Integer
//     StartTime: Date Timestamp
//     CreateTime: Date Timestamp
//
// Name: EBPFProfilingTaskQuery
// Args:
//     TaskId: String
//     ProcessId: Integer List
//     TaskUpdateTime: Date timestamp
//     TriggerType: Enum, value = FIXED_TIME
//     TargetType: Enum, value = ON_CPU, OFF_CPU or NETWORK
//     TaskStartTime: Date Timestamp
//     ExtensionConfigJSON: JSON serialization of NetworkSamplings.
//         --- NetworkSamplings ---
//         NetworkSamplings: List
//             URIRegex: String
//             MinDuration: Integer
//             When4xx: Boolean
//             When5xx: Boolean
//             Settings: Object
//                 RequireCompleteRequest: Boolean
//                 MaxRequestSize: Integer
//                 RequireCompleteResponse: Boolean
//                 MaxResponseSize: Integer
//         ------------------------
//     FixedTriggerDuration: Long
//
// Name: ContinuousProfilingPolicyQuery
// Args:
//     ServiceWithPolicyJSON: List JSON serialization of ServiceWithPolicy.
//         --- ServiceWithPolicy ---
//         ServiceName: String
//         UUID: String
//         Profiling: Multiple profiling configuration. Map
//             Key: Profiling type. Enum, value = ON_CPU, OFF_CPU, NETWORK
//             Value: Profiling policies. Map
//                 Key: Monitoring type. Enum, value = PROCESS_CPU, PROCESS_THREAD_COUNT, SYSTEM_LOAD, HTTP_ERROR_RATE, HTTP_AVG_RESPONSE_TIME
//                 Value: Policy configuration. Object.
//                     Threshold: String
//                     Period(s): Integer
//                     Count: Integer
//                     URIList: List<String>
//                     URIRegex: String
//         ---------------------------
//
// Name: ContinuousProfilingReportTask
// Args:
//     TaskId: String
type Command struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Use command name to distinguish different data type.
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// Data content in command.
	// The value of content needs to be serialized as string for transmission.
	//
	// Basic data type: convert as string.
	// The list of basic data: multiple data are split by ",".
	// Complex data: serialize string through json.
	Args          []*KeyStringValuePair `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_common_Command_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_common_Command_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_common_Command_proto_rawDescGZIP(), []int{0}
}

func (x *Command) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Command) GetArgs() []*KeyStringValuePair {
	if x != nil {
		return x.Args
	}
	return nil
}

// Transferring multiple Command in agent and OAP.
type Commands struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commands      []*Command             `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Commands) Reset() {
	*x = Commands{}
	mi := &file_common_Command_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commands) ProtoMessage() {}

func (x *Commands) ProtoReflect() protoreflect.Message {
	mi := &file_common_Command_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commands.ProtoReflect.Descriptor instead.
func (*Commands) Descriptor() ([]byte, []int) {
	return file_common_Command_proto_rawDescGZIP(), []int{1}
}

func (x *Commands) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

var File_common_Command_proto protoreflect.FileDescriptor

const file_common_Command_proto_rawDesc = "" +
	"\n" +
	"\x14common/Command.proto\x12\rskywalking.v3\x1a\x13common/Common.proto\"Z\n" +
	"\aCommand\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x125\n" +
	"\x04args\x18\x02 \x03(\v2!.skywalking.v3.KeyStringValuePairR\x04args\">\n" +
	"\bCommands\x122\n" +
	"\bcommands\x18\x01 \x03(\v2\x16.skywalking.v3.CommandR\bcommandsB\x15Z\x13proto/common;commonb\x06proto3"

var (
	file_common_Command_proto_rawDescOnce sync.Once
	file_common_Command_proto_rawDescData []byte
)

func file_common_Command_proto_rawDescGZIP() []byte {
	file_common_Command_proto_rawDescOnce.Do(func() {
		file_common_Command_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_Command_proto_rawDesc), len(file_common_Command_proto_rawDesc)))
	})
	return file_common_Command_proto_rawDescData
}

var file_common_Command_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_common_Command_proto_goTypes = []any{
	(*Command)(nil),            // 0: skywalking.v3.Command
	(*Commands)(nil),           // 1: skywalking.v3.Commands
	(*KeyStringValuePair)(nil), // 2: skywalking.v3.KeyStringValuePair
}
var file_common_Command_proto_depIdxs = []int32{
	2, // 0: skywalking.v3.Command.args:type_name -> skywalking.v3.KeyStringValuePair
	0, // 1: skywalking.v3.Commands.commands:type_name -> skywalking.v3.Command
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_common_Command_proto_init() }
func file_common_Command_proto_init() {
	if File_common_Command_proto != nil {
		return
	}
	file_common_Common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_Command_proto_rawDesc), len(file_common_Command_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_Command_proto_goTypes,
		DependencyIndexes: file_common_Command_proto_depIdxs,
		MessageInfos:      file_common_Command_proto_msgTypes,
	}.Build()
	File_common_Command_proto = out.File
	file_common_Command_proto_goTypes = nil
	file_common_Command_proto_depIdxs = nil
}
